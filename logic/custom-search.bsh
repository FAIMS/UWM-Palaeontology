/****************************** SEARCH EXTENSION ******************************/
/* Implements an extension to the search page which allows users to           */
/* constrain their searches by existing column                                */
/******************************************************************************/
addOnEvent("Control/Search", "show", "populateColumn()");
addOnEvent("Control/Search/Select_Column", "click", "search()");

void populateColumn() {
  String refColumn = "Control/Search/Select_Column";

  String q = "";
  q += " SELECT uuid, response, attributename, measure";
  q += "   FROM latestNonDeletedAentvalue";
  q += "   JOIN latestNonDeletedArchEntFormattedIdentifiers USING (uuid)";
  q += "   JOIN attributekey USING (attributeid)";
  q += "  WHERE attributename = 'Locality Name'";

  FetchCallback popColumn = new FetchCallback() {
    onFetch(result) {
      List l = new ArrayList();
      List all = new ArrayList();
      all.add("");
      all.add("{All}");
      all.add("");
      all.add("");

      l.add(all);
      l.addAll(result);
      populateDropDown(refColumn, l);
    }
  };

  fetchAll(q, popColumn);
}

void search(){
  String tabgroup = "Control";
  String refEntityList  = tabgroup + "/Search/Entity_List";
  String refSearchTerm  = tabgroup + "/Search/Search_Term";
  String refEntityTypes = tabgroup + "/Search/Entity_Types";
  String refSelectColumn  = tabgroup + "/Search/Select_Column";
  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String name = getFieldValue(refSelectColumn);
  String searchQuery = "";
  if(name == null || name == "") {
    searchQuery = "SELECT uuid, response "+
                         "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                         " WHERE uuid in (SELECT uuid "+
                         "                  FROM latestNonDeletedArchEntIdentifiers "+
                         "                 WHERE measure LIKE {term}||'%'  "+
                         "                   AND ( aenttypename = {type} OR '' = {type} ) "+
                         "                )  "+
                         " ORDER BY response "+
                         " LIMIT ? "+
                         "OFFSET ? ";
    searchQuery = dbReplaceFirst(searchQuery, "{term}", term);
    searchQuery = dbReplaceFirst(searchQuery, "{type}", type);
    searchQuery = dbReplaceFirst(searchQuery, "{type}", type);
  } else {
    searchQuery = "  SELECT uuid, response " +
                         "    FROM latestNonDeletedArchEntFormattedIdentifiers  " +
                         "  WHERE uuid in (SELECT uuid " +
                         "                  FROM latestNonDeletedArchEntIdentifiers " +
                         "                 WHERE measure LIKE {term}||'%'  " +
                         "                   AND ( aenttypename = {type} OR '' = {type} ) " +
                         "                )  " +
                         "    AND ( " +
                         "        ('{name}' = '\\0') OR " +
                         "        uuid IN ( SELECT childuuid " +
                         "                    FROM parentchild  " +
                         "                  WHERE parentuuid = {name}  " +
                         "                  UNION  " +
                         "                  SELECT b.childuuid" +
                         "                    FROM parentchild a  " +
                         "                  JOIN parentchild b ON (a.childuuid = b.parentuuid)  "+
                         "                  WHERE a.parentuuid = {name} " +
                         "                  UNION " +
                         "                  SELECT uuid " +
                         "                    FROM latestnondeletedarchentformattedidentifiers " +
                         "                  WHERE uuid = {name}" +
                         "                  )" +
                         "        )" +
                         "  ORDER BY response "+
                         "  LIMIT ? " +
                         "  OFFSET ? ";
     searchQuery = dbReplaceFirst(searchQuery, "{term}", term);
     searchQuery = dbReplaceFirst(searchQuery, "{type}", type);
     searchQuery = dbReplaceFirst(searchQuery, "{type}", type);
     searchQuery = dbReplaceFirst(searchQuery, "{name}", name);
     searchQuery = dbReplaceFirst(searchQuery, "{name}", name);
     searchQuery = dbReplaceFirst(searchQuery, "{name}", name);
     searchQuery = dbReplaceFirst(searchQuery, "{name}", name);
  }
populateCursorList(refEntityList, searchQuery, 25);
refreshTabgroupCSS(tabgroup);

  Log.d("Module", "Search query: " + searchQuery);
}
